{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","alphabets","letter","positions","color","size","genAlphabet","bind","event","console","log","key","this","slice","newAlphabet","i","push","Math","floor","random","replace","toString","sizes","length","setState","genStyle","alphabet","position","top","bottom","left","right","fontSize","map","style","onBlur","e","target","focus","autoFocus","className","id","onKeyPress","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAkGeA,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,CACT,CAAEC,OAAQ,eAAgBC,UAAW,CAAC,IAAI,IAAI,IAAI,KAAMC,MAAM,QAASC,KAAM,SAGjF,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,+CAiBnB,SAAYC,GACVC,QAAQC,IAAIF,EAAMG,KAClB,IAAIV,EAAYW,KAAKZ,MAAMC,UAAUY,QACjCC,EAAc,CAChBZ,OAAQM,EAAMG,IACdR,UAAY,WAEV,IADA,IAAIA,EAAY,GACPY,EAAI,EAAGA,EAAI,EAAGA,IACrBZ,EAAUa,KAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAAK,KAExD,OAAOhB,EALG,GAOZC,MACS,UAAUgB,QAAQ,MAAK,WAAW,UAAyB,GAAdH,KAAKE,WAAcE,SAAS,OAElFhB,KAAO,WACL,IAAIiB,EAAQ,CAAC,MAAM,QAAQ,MAAM,QAAQ,OACzC,OAAOA,EAAML,KAAKC,MAAMD,KAAKE,SAAWG,EAAMC,SAFzC,IAMTtB,EAAUe,KAAKF,GACfF,KAAKY,SAAS,CACZvB,UAAYA,M,oBAKhB,WACE,IAAIA,EAAYW,KAAKZ,MAAMC,UAAUY,QAE/BY,EAAW,SAACC,GAUhB,MATY,CACVC,SAAU,QACVC,IAAKF,EAASvB,UAAU,GACxB0B,OAAQH,EAASvB,UAAU,GAC3B2B,KAAMJ,EAASvB,UAAU,GACzB4B,MAAOL,EAASvB,UAAU,GAC1BC,MAAOsB,EAAStB,MAChB4B,SAAUN,EAASrB,OAQvB,OAHAJ,EAAYA,EAAUgC,KAAI,SAAAP,GACxB,OAAO,oBAA4BQ,MAAOT,EAASC,GAA5C,SAAwDA,EAASxB,QAAxDwB,EAASvB,cAGzB,gCACE,uBAAOgC,OAAQ,SAACC,GAAD,OAAOA,EAAEC,OAAOC,SAASC,WAAS,EAACC,UAAW,cAAeC,GAAG,MAAMC,WAAY9B,KAAKN,cACrGL,S,GApES0C,IAAMC,WCZTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3469b8f.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      alphabets: [\n        { letter: \"Start typing\", positions: [100,200,300,400], color:\"white\", size: \"4em\"}\n      ]\n    }\n    this.genAlphabet = this.genAlphabet.bind(this)\n  }\n\n  // genPositions() {\n  //   let positions = []\n  //   for (let i = 0; i < 3; i++) {\n  //     positions.push((Math.floor(Math.random() * 99) + 0) + \"%\")\n  //   }\n  //   return positions\n  // }\n  genAlphabet(event) {\n    console.log(event.key)\n    let alphabets = this.state.alphabets.slice()\n    let newAlphabet = {\n      letter: event.key,\n      positions: (() => {\n        let positions = []\n        for (let i = 0; i < 4; i++) {\n          positions.push((Math.floor(Math.random() * 99) + 0) + \"%\")\n        }\n        return positions\n      })(),\n      color: (() =>{\n        return \"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});\n      })(),\n      size: (() =>{\n        let sizes = [\"2em\",\"2.5em\",\"3em\",\"3.5em\",\"4em\"]\n        return sizes[Math.floor(Math.random() * sizes.length)]\n      })()\n    }\n\n    alphabets.push(newAlphabet)\n    this.setState({\n      alphabets : alphabets\n    })\n\n  }\n\n  render() {\n    let alphabets = this.state.alphabets.slice()\n\n    const genStyle = (alphabet) => {\n      let style = {\n        position: 'fixed',\n        top: alphabet.positions[0],\n        bottom: alphabet.positions[1],\n        left: alphabet.positions[2],\n        right: alphabet.positions[3],\n        color: alphabet.color,\n        fontSize: alphabet.size\n      }\n      return style\n    }\n\n    alphabets = alphabets.map(alphabet => {\n      return <h1 key={alphabet.positions}style={genStyle(alphabet)}>{alphabet.letter}</h1>\n    })\n    return (\n      <div>\n        <input onBlur={(e) => e.target.focus()} autoFocus className={\"transparent\"} id=\"one\" onKeyPress={this.genAlphabet}/>\n        {alphabets}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}